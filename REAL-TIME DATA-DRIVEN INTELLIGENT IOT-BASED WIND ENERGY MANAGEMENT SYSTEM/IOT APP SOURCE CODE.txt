SOURCE CODE

IOT APP CODE
//Your username is windsystem
//projectiot2025
// Code generated by Arduino IoT Cloud, DO NOT EDIT.
#include <ArduinoIoTCloud.h>
#include <Arduino_ConnectionHandler.h>
const char DEVICE_LOGIN_NAME[] = "4fae01a1-176e-4ee9-b969-
e7ecc93c0bb3";
95
const char SSID[] = "projectiot"; // Network SSID (name)
const char PASS[] = "123456789"; // Network password (use for WPA,
or use as key for WEP)
const char DEVICE_KEY[] = "6lrt3v7##0mbIysAtSysrpLHC"; //
Secret device password
void onBvChange();
void onWvChange();
void onBpChange();
void onTempChange();
void onTsChange();
float bv;
float wv;
int bp;
int temp;
int ts;
unsigned long lastUpdateTime = 0;
const unsigned long updateInterval = 1000; // 1 second
void initProperties(){
ArduinoCloud.setBoardId(DEVICE_LOGIN_NAME);
ArduinoCloud.setSecretDeviceKey(DEVICE_KEY);
ArduinoCloud.addProperty(bv, READWRITE, ON_CHANGE,
onBvChange);
ArduinoCloud.addProperty(wv, READWRITE, ON_CHANGE,
onWvChange);
ArduinoCloud.addProperty(bp, READWRITE, ON_CHANGE,
onBpChange);
ArduinoCloud.addProperty(temp, READWRITE, ON_CHANGE,
onTempChange);
96
ArduinoCloud.addProperty(ts, READWRITE, ON_CHANGE,
onTsChange);
}
WiFiConnectionHandler ArduinoIoTPreferredConnection(SSID, PASS);
void setup() {
Serial.begin(9600);
initProperties();
ArduinoCloud.begin(ArduinoIoTPreferredConnection);
setDebugMessageLevel(2); // Enable Debug Messages
ArduinoCloud.printDebugInfo();
}
void loop() {
unsigned long currentMillis = millis();
// Update cloud at set intervals
if (currentMillis - lastUpdateTime >= updateInterval) {
ArduinoCloud.update();
lastUpdateTime = currentMillis;
}
// Handle Serial Input and Update Variables
if (Serial.available() > 0) {
char identifier = Serial.read();
switch (identifier) {
case 'T': temp = Serial.parseInt();
break;
case 'S': ts = Serial.parseINT(); break;
case 'a': bv = Serial.parseFloat(); break;
case 'b': bp = Serial.parseInt(); break;
case 'w': wv = Serial.parseFloat(); break;
}
97
}
}
void onBvChange() {Serial.println("Status changed to: " + String(bv));}
void onTempChange() {Serial.println("Status changed to: " +
String(temp));}
void onWvChange() {Serial.println("Status changed to: " + String(wv));}
void onBpChange() {Serial.println("Status changed to: " + String(bp));}
void onTsChange() {Serial.println("Status changed to: " + String(ts));}